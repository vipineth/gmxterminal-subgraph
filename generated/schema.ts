// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ChainlinkPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("tokenName", Value.fromString(""));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChainlinkPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ChainlinkPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ChainlinkPrice", id.toString(), this);
    }
  }

  static load(id: string): ChainlinkPrice | null {
    return changetype<ChainlinkPrice | null>(store.get("ChainlinkPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value!.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class HourlyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("swap", Value.fromBigInt(BigInt.zero()));
    this.set("liquidation", Value.fromBigInt(BigInt.zero()));
    this.set("margin", Value.fromBigInt(BigInt.zero()));
    this.set("glpMint", Value.fromBigInt(BigInt.zero()));
    this.set("glpBurn", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromBigInt(BigInt.zero()));
    this.set("tradeCount", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourlyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourlyData", id.toString(), this);
    }
  }

  static load(id: string): HourlyData | null {
    return changetype<HourlyData | null>(store.get("HourlyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value!.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value!.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get glpMint(): BigInt {
    let value = this.get("glpMint");
    return value!.toBigInt();
  }

  set glpMint(value: BigInt) {
    this.set("glpMint", Value.fromBigInt(value));
  }

  get glpBurn(): BigInt {
    let value = this.get("glpBurn");
    return value!.toBigInt();
  }

  set glpBurn(value: BigInt) {
    this.set("glpBurn", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value!.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value!.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get liquidationCount(): BigInt {
    let value = this.get("liquidationCount");
    return value!.toBigInt();
  }

  set liquidationCount(value: BigInt) {
    this.set("liquidationCount", Value.fromBigInt(value));
  }
}

export class TokenDailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("swap", Value.fromBigInt(BigInt.zero()));
    this.set("liquidation", Value.fromBigInt(BigInt.zero()));
    this.set("margin", Value.fromBigInt(BigInt.zero()));
    this.set("glpMint", Value.fromBigInt(BigInt.zero()));
    this.set("glpBurn", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromBigInt(BigInt.zero()));
    this.set("tradeCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDailyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenDailyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenDailyData", id.toString(), this);
    }
  }

  static load(id: string): TokenDailyData | null {
    return changetype<TokenDailyData | null>(store.get("TokenDailyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value!.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value!.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get glpMint(): BigInt {
    let value = this.get("glpMint");
    return value!.toBigInt();
  }

  set glpMint(value: BigInt) {
    this.set("glpMint", Value.fromBigInt(value));
  }

  get glpBurn(): BigInt {
    let value = this.get("glpBurn");
    return value!.toBigInt();
  }

  set glpBurn(value: BigInt) {
    this.set("glpBurn", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value!.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value!.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DailyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("swap", Value.fromBigInt(BigInt.zero()));
    this.set("liquidation", Value.fromBigInt(BigInt.zero()));
    this.set("margin", Value.fromBigInt(BigInt.zero()));
    this.set("glpMint", Value.fromBigInt(BigInt.zero()));
    this.set("glpBurn", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromBigInt(BigInt.zero()));
    this.set("tradeCount", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyData", id.toString(), this);
    }
  }

  static load(id: string): DailyData | null {
    return changetype<DailyData | null>(store.get("DailyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value!.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value!.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get glpMint(): BigInt {
    let value = this.get("glpMint");
    return value!.toBigInt();
  }

  set glpMint(value: BigInt) {
    this.set("glpMint", Value.fromBigInt(value));
  }

  get glpBurn(): BigInt {
    let value = this.get("glpBurn");
    return value!.toBigInt();
  }

  set glpBurn(value: BigInt) {
    this.set("glpBurn", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value!.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value!.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get liquidationCount(): BigInt {
    let value = this.get("liquidationCount");
    return value!.toBigInt();
  }

  set liquidationCount(value: BigInt) {
    this.set("liquidationCount", Value.fromBigInt(value));
  }
}

export class WeeklyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("swap", Value.fromBigInt(BigInt.zero()));
    this.set("liquidation", Value.fromBigInt(BigInt.zero()));
    this.set("margin", Value.fromBigInt(BigInt.zero()));
    this.set("glpMint", Value.fromBigInt(BigInt.zero()));
    this.set("glpBurn", Value.fromBigInt(BigInt.zero()));
    this.set("fees", Value.fromBigInt(BigInt.zero()));
    this.set("tradeCount", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeeklyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WeeklyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WeeklyData", id.toString(), this);
    }
  }

  static load(id: string): WeeklyData | null {
    return changetype<WeeklyData | null>(store.get("WeeklyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value!.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value!.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get glpMint(): BigInt {
    let value = this.get("glpMint");
    return value!.toBigInt();
  }

  set glpMint(value: BigInt) {
    this.set("glpMint", Value.fromBigInt(value));
  }

  get glpBurn(): BigInt {
    let value = this.get("glpBurn");
    return value!.toBigInt();
  }

  set glpBurn(value: BigInt) {
    this.set("glpBurn", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value!.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value!.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get liquidationCount(): BigInt {
    let value = this.get("liquidationCount");
    return value!.toBigInt();
  }

  set liquidationCount(value: BigInt) {
    this.set("liquidationCount", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("totalPnL", Value.fromBigInt(BigInt.zero()));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("assetList", Value.fromStringArray(new Array(0)));
    this.set("openTradesKey", Value.fromStringArray(new Array(0)));
    this.set("openTrades", Value.fromStringArray(new Array(0)));
    this.set("closedTrades", Value.fromStringArray(new Array(0)));
    this.set("liquidatedTrades", Value.fromStringArray(new Array(0)));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get totalPnL(): BigInt {
    let value = this.get("totalPnL");
    return value!.toBigInt();
  }

  set totalPnL(value: BigInt) {
    this.set("totalPnL", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get assetList(): Array<string> {
    let value = this.get("assetList");
    return value!.toStringArray();
  }

  set assetList(value: Array<string>) {
    this.set("assetList", Value.fromStringArray(value));
  }

  get openTradesKey(): Array<string> {
    let value = this.get("openTradesKey");
    return value!.toStringArray();
  }

  set openTradesKey(value: Array<string>) {
    this.set("openTradesKey", Value.fromStringArray(value));
  }

  get openTrades(): Array<string> {
    let value = this.get("openTrades");
    return value!.toStringArray();
  }

  set openTrades(value: Array<string>) {
    this.set("openTrades", Value.fromStringArray(value));
  }

  get closedTrades(): Array<string> {
    let value = this.get("closedTrades");
    return value!.toStringArray();
  }

  set closedTrades(value: Array<string>) {
    this.set("closedTrades", Value.fromStringArray(value));
  }

  get liquidatedTrades(): Array<string> {
    let value = this.get("liquidatedTrades");
    return value!.toStringArray();
  }

  set liquidatedTrades(value: Array<string>) {
    this.set("liquidatedTrades", Value.fromStringArray(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }

  get marginTrades(): Array<string> {
    let value = this.get("marginTrades");
    return value!.toStringArray();
  }

  set marginTrades(value: Array<string>) {
    this.set("marginTrades", Value.fromStringArray(value));
  }
}

export class MarginTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("collateralToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralDelta", Value.fromBigInt(BigInt.zero()));
    this.set("tradingToken", Value.fromBytes(Bytes.empty()));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
    this.set("isLong", Value.fromBoolean(false));
    this.set("sizeDelta", Value.fromBigInt(BigInt.zero()));
    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("isClosed", Value.fromBoolean(false));
    this.set("realisedPnl", Value.fromBigInt(BigInt.zero()));
    this.set("tradeStart", Value.fromBigInt(BigInt.zero()));
    this.set("tradeEnd", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("transactions", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginTrade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginTrade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginTrade", id.toString(), this);
    }
  }

  static load(id: string): MarginTrade | null {
    return changetype<MarginTrade | null>(store.get("MarginTrade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value!.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get tradingToken(): Bytes {
    let value = this.get("tradingToken");
    return value!.toBytes();
  }

  set tradingToken(value: Bytes) {
    this.set("tradingToken", Value.fromBytes(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value!.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get isClosed(): boolean {
    let value = this.get("isClosed");
    return value!.toBoolean();
  }

  set isClosed(value: boolean) {
    this.set("isClosed", Value.fromBoolean(value));
  }

  get realisedPnl(): BigInt {
    let value = this.get("realisedPnl");
    return value!.toBigInt();
  }

  set realisedPnl(value: BigInt) {
    this.set("realisedPnl", Value.fromBigInt(value));
  }

  get tradeStart(): BigInt {
    let value = this.get("tradeStart");
    return value!.toBigInt();
  }

  set tradeStart(value: BigInt) {
    this.set("tradeStart", Value.fromBigInt(value));
  }

  get tradeEnd(): BigInt {
    let value = this.get("tradeEnd");
    return value!.toBigInt();
  }

  set tradeEnd(value: BigInt) {
    this.set("tradeEnd", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class UserDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("totalPnL", Value.fromBigInt(BigInt.zero()));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("assetList", Value.fromStringArray(new Array(0)));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserDayData", id.toString(), this);
    }
  }

  static load(id: string): UserDayData | null {
    return changetype<UserDayData | null>(store.get("UserDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get totalPnL(): BigInt {
    let value = this.get("totalPnL");
    return value!.toBigInt();
  }

  set totalPnL(value: BigInt) {
    this.set("totalPnL", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get assetList(): Array<string> {
    let value = this.get("assetList");
    return value!.toStringArray();
  }

  set assetList(value: Array<string>) {
    this.set("assetList", Value.fromStringArray(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }
}

export class UserWeeklyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("totalPnL", Value.fromBigInt(BigInt.zero()));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("assetList", Value.fromStringArray(new Array(0)));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserWeeklyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserWeeklyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserWeeklyData", id.toString(), this);
    }
  }

  static load(id: string): UserWeeklyData | null {
    return changetype<UserWeeklyData | null>(store.get("UserWeeklyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get totalPnL(): BigInt {
    let value = this.get("totalPnL");
    return value!.toBigInt();
  }

  set totalPnL(value: BigInt) {
    this.set("totalPnL", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get assetList(): Array<string> {
    let value = this.get("assetList");
    return value!.toStringArray();
  }

  set assetList(value: Array<string>) {
    this.set("assetList", Value.fromStringArray(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }
}

export class UserMonthlyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("totalPnL", Value.fromBigInt(BigInt.zero()));
    this.set("totalTrades", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("assetList", Value.fromStringArray(new Array(0)));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserMonthlyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserMonthlyData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserMonthlyData", id.toString(), this);
    }
  }

  static load(id: string): UserMonthlyData | null {
    return changetype<UserMonthlyData | null>(store.get("UserMonthlyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get totalPnL(): BigInt {
    let value = this.get("totalPnL");
    return value!.toBigInt();
  }

  set totalPnL(value: BigInt) {
    this.set("totalPnL", Value.fromBigInt(value));
  }

  get totalTrades(): BigInt {
    let value = this.get("totalTrades");
    return value!.toBigInt();
  }

  set totalTrades(value: BigInt) {
    this.set("totalTrades", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get assetList(): Array<string> {
    let value = this.get("assetList");
    return value!.toStringArray();
  }

  set assetList(value: Array<string>) {
    this.set("assetList", Value.fromStringArray(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }
}

export class MarginTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("key", Value.fromString(""));
    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("indexToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralDelta", Value.fromBigInt(BigInt.zero()));
    this.set("sizeDelta", Value.fromBigInt(BigInt.zero()));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
    this.set("isLong", Value.fromBoolean(false));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginTransaction", id.toString(), this);
    }
  }

  static load(id: string): MarginTransaction | null {
    return changetype<MarginTransaction | null>(
      store.get("MarginTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get indexToken(): Bytes {
    let value = this.get("indexToken");
    return value!.toBytes();
  }

  set indexToken(value: Bytes) {
    this.set("indexToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value!.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value!.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("key", Value.fromString(""));
    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("indexToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralToken", Value.fromBytes(Bytes.empty()));
    this.set("collateralDelta", Value.fromBigInt(BigInt.zero()));
    this.set("sizeDelta", Value.fromBigInt(BigInt.zero()));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
    this.set("isLong", Value.fromBoolean(false));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get indexToken(): Bytes {
    let value = this.get("indexToken");
    return value!.toBytes();
  }

  set indexToken(value: Bytes) {
    this.set("indexToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value!.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value!.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class LiquidationTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("key", Value.fromString(""));
    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("collateralToken", Value.fromBytes(Bytes.empty()));
    this.set("indexToken", Value.fromBytes(Bytes.empty()));
    this.set("isLong", Value.fromBoolean(false));
    this.set("size", Value.fromBigInt(BigInt.zero()));
    this.set("collateral", Value.fromBigInt(BigInt.zero()));
    this.set("reserveAmount", Value.fromBigInt(BigInt.zero()));
    this.set("realisedPnl", Value.fromBigInt(BigInt.zero()));
    this.set("markPrice", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidationTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidationTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidationTransaction", id.toString(), this);
    }
  }

  static load(id: string): LiquidationTransaction | null {
    return changetype<LiquidationTransaction | null>(
      store.get("LiquidationTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value!.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get indexToken(): Bytes {
    let value = this.get("indexToken");
    return value!.toBytes();
  }

  set indexToken(value: Bytes) {
    this.set("indexToken", Value.fromBytes(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value!.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value!.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get reserveAmount(): BigInt {
    let value = this.get("reserveAmount");
    return value!.toBigInt();
  }

  set reserveAmount(value: BigInt) {
    this.set("reserveAmount", Value.fromBigInt(value));
  }

  get realisedPnl(): BigInt {
    let value = this.get("realisedPnl");
    return value!.toBigInt();
  }

  set realisedPnl(value: BigInt) {
    this.set("realisedPnl", Value.fromBigInt(value));
  }

  get markPrice(): BigInt {
    let value = this.get("markPrice");
    return value!.toBigInt();
  }

  set markPrice(value: BigInt) {
    this.set("markPrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SwapTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("tokenIn", Value.fromBytes(Bytes.empty()));
    this.set("tokenOut", Value.fromBytes(Bytes.empty()));
    this.set("amountIn", Value.fromBigInt(BigInt.zero()));
    this.set("amountOut", Value.fromBigInt(BigInt.zero()));
    this.set("amountOutAfterFees", Value.fromBigInt(BigInt.zero()));
    this.set("feeBasisPoints", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SwapTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SwapTransaction", id.toString(), this);
    }
  }

  static load(id: string): SwapTransaction | null {
    return changetype<SwapTransaction | null>(store.get("SwapTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    return value!.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    return value!.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value!.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get amountOutAfterFees(): BigInt {
    let value = this.get("amountOutAfterFees");
    return value!.toBigInt();
  }

  set amountOutAfterFees(value: BigInt) {
    this.set("amountOutAfterFees", Value.fromBigInt(value));
  }

  get feeBasisPoints(): BigInt {
    let value = this.get("feeBasisPoints");
    return value!.toBigInt();
  }

  set feeBasisPoints(value: BigInt) {
    this.set("feeBasisPoints", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AddGLPLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("aumInUsdg", Value.fromBigInt(BigInt.zero()));
    this.set("glpSupply", Value.fromBigInt(BigInt.zero()));
    this.set("usdgAmount", Value.fromBigInt(BigInt.zero()));
    this.set("mintAmount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddGLPLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AddGLPLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AddGLPLiquidity", id.toString(), this);
    }
  }

  static load(id: string): AddGLPLiquidity | null {
    return changetype<AddGLPLiquidity | null>(store.get("AddGLPLiquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value!.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }

  get glpSupply(): BigInt {
    let value = this.get("glpSupply");
    return value!.toBigInt();
  }

  set glpSupply(value: BigInt) {
    this.set("glpSupply", Value.fromBigInt(value));
  }

  get usdgAmount(): BigInt {
    let value = this.get("usdgAmount");
    return value!.toBigInt();
  }

  set usdgAmount(value: BigInt) {
    this.set("usdgAmount", Value.fromBigInt(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value!.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RemoveGLPLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("glpAmount", Value.fromBigInt(BigInt.zero()));
    this.set("aumInUsdg", Value.fromBigInt(BigInt.zero()));
    this.set("glpSupply", Value.fromBigInt(BigInt.zero()));
    this.set("usdgAmount", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amountOut", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveGLPLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RemoveGLPLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RemoveGLPLiquidity", id.toString(), this);
    }
  }

  static load(id: string): RemoveGLPLiquidity | null {
    return changetype<RemoveGLPLiquidity | null>(
      store.get("RemoveGLPLiquidity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get glpAmount(): BigInt {
    let value = this.get("glpAmount");
    return value!.toBigInt();
  }

  set glpAmount(value: BigInt) {
    this.set("glpAmount", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value!.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }

  get glpSupply(): BigInt {
    let value = this.get("glpSupply");
    return value!.toBigInt();
  }

  set glpSupply(value: BigInt) {
    this.set("glpSupply", Value.fromBigInt(value));
  }

  get usdgAmount(): BigInt {
    let value = this.get("usdgAmount");
    return value!.toBigInt();
  }

  set usdgAmount(value: BigInt) {
    this.set("usdgAmount", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value!.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
